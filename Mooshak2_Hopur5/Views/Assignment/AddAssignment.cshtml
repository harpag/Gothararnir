@model  Mooshak2_Hopur5.Models.ViewModels.AssignmentViewModel

@{
    ViewBag.Title = "Create Assignment";
}

<h2>Create new assignment</h2>

@using (Html.BeginForm("CreateAssignment", "Assignment", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
<div class="container">
    <ul class="nav nav-pills">
        <li class="active"><a href="#tab_a" data-toggle="tab">Assignment info</a></li>
        <li><a href="#tab_b" data-toggle="tab">Assignment Parts</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="tab_a">
            <div class="row">
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.AssignmentName, new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.AssignmentName)
                    @Html.EditorFor(m => m.AssignmentName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.CourseId, new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.CourseId)
                    @Html.DropDownListFor(m => m.CourseId, (Model.UserCourses as SelectList), new { @class = "form-control", data_placeholder = "Agent(s)." })
                </div>
                <div class="col-md-12 form-group">
                    @Html.LabelFor(m => m.AssignmentDescription, new { @class = "control-label", id = "textBoxArea" })
                    @Html.ValidationMessageFor(m => m.AssignmentDescription)
                    @Html.TextAreaFor(m => m.AssignmentDescription, new { htmlAttributes = new { @class = "form-control", rows = 5} })
                </div>
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.Weight, new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.Weight)
                    @Html.EditorFor(m => m.Weight, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.MaxSubmission, new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.MaxSubmission)
                    @Html.EditorFor(m => m.MaxSubmission, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.AssignDate, new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.AssignDate)
                    @Html.EditorFor(m => m.AssignDate, new { htmlAttributes = new { @class = "form-control", id = "datepicker" } })
                </div>
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.DueDate, new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.DueDate)
                    @Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { @class = "form-control", id = "datepicker" } })
                </div>
                <div class="product-attachments">
                    <div class="col-md-12 form-group product-attachment">
                        @Html.LabelFor(m => m.ImageUploaded, new { @class = "control-label" })
                        @Html.ValidationMessageFor(m => m.ImageUploaded)
                        @Html.TextBoxFor(m => m.ImageUploaded, new { type = "file", @class = "form-control" })
                        @*<input name="ImageUploaded" type="file" class="form-control" />*@
                    </div>
                </div>
                @Html.TextBoxFor(m => m.CourseId, new { style = "visibility:hidden" })
            </div>
        </div>
        <div class="tab-pane" id="tab_b">
            <div class="col-md-6 form-group">
                @Html.LabelFor(m => m.AssignmentPartList[0].AssignmentPartName, new { @class = "control-label" })
                @Html.ValidationMessageFor(m => m.AssignmentPartList[0].AssignmentPartName)
                @Html.EditorFor(m => m.AssignmentPartList[0].AssignmentPartName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-6 form-group">
                @Html.LabelFor(m => m.AssignmentPartList[0].ProgrammingLanguageId, new { @class = "control-label" })
                @Html.ValidationMessageFor(m => m.AssignmentPartList[0].ProgrammingLanguageId)
                @Html.DropDownListFor(m => m.AssignmentPartList[0].ProgrammingLanguageId, (Model.ProgrammingLanguages as SelectList), new { @class = "form-control", data_placeholder = "Agent(s)." })
            </div>
            <div class="col-md-12 form-group">
                @Html.LabelFor(m => m.AssignmentPartList[0].AssignmentPartDescription, new { @class = "control-label" })
                @Html.ValidationMessageFor(m => m.AssignmentPartList[0].AssignmentPartDescription)
                @Html.EditorFor(m => m.AssignmentPartList[0].AssignmentPartDescription, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-6 form-group">
                @Html.LabelFor(m => m.AssignmentPartList[0].Weight, new { @class = "control-label" })
                @Html.ValidationMessageFor(m => m.AssignmentPartList[0].Weight)
                @Html.EditorFor(m => m.AssignmentPartList[0].Weight, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="product-attachments">
                <div class="col-md-6 form-group product-attachment">
                    @Html.LabelFor(m => m.AssignmentPartList[0].ImageUploaded, new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.AssignmentPartList[0].ImageUploaded)
                    @Html.TextBoxFor(m => m.AssignmentPartList[0].ImageUploaded, new { type = "file", @class = "form-control" })
                </div>
            </div>
            <h3 class="col-xs-12 form-group">Test case</h3>
            <div class="col-xs-6 form-group">
                @Html.LabelFor(m => m.AssignmentPartList[0].AssignmentTestCaseList[0].input, new { @class = "control-label" })
                @Html.ValidationMessageFor(m => m.AssignmentPartList[0].AssignmentTestCaseList[0].input)
                @Html.TextAreaFor(m => m.AssignmentPartList[0].AssignmentTestCaseList[0].input, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-xs-6 form-group">
                @Html.LabelFor(m => m.AssignmentPartList[0].AssignmentTestCaseList[0].output, new { @class = "control-label" })
                @Html.ValidationMessageFor(m => m.AssignmentPartList[0].AssignmentTestCaseList[0].output)
                @Html.TextAreaFor(m => m.AssignmentPartList[0].AssignmentTestCaseList[0].output, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </div>
</div>
}

<script type='text/javascript'>
        function addFields(){
            // Number of inputs to create
            var number = document.getElementById("member").value;
            // Container <div> where dynamic content will be placed
            var container = document.getElementById("container");
            // Clear previous contents of the container
            while (container.hasChildNodes()) {
                container.removeChild(container.lastChild);
            }
            for (i=0;i<number;i++){
                // Append a node with a random text
                container.appendChild(document.createTextNode("Member " + (i+1)));
                // Create an <input> element, set its type and name attributes
                var input = document.createElement("input");
                input.type = "text";
                input.name = "member" + i;
                container.appendChild(input);
                // Append a line break
                container.appendChild(document.createElement("br"));
            }
        }
</script>